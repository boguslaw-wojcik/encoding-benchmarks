// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: superhero.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Superhero struct {
	Id                   int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AffiliationId        int32         `protobuf:"varint,2,opt,name=affiliation_id,json=affiliationId,proto3" json:"affiliation_id,omitempty"`
	Name                 string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Life                 float32       `protobuf:"fixed32,4,opt,name=life,proto3" json:"life,omitempty"`
	Energy               float32       `protobuf:"fixed32,5,opt,name=energy,proto3" json:"energy,omitempty"`
	Powers               []*Superpower `protobuf:"bytes,6,rep,name=powers,proto3" json:"powers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Superhero) Reset()         { *m = Superhero{} }
func (m *Superhero) String() string { return proto.CompactTextString(m) }
func (*Superhero) ProtoMessage()    {}
func (*Superhero) Descriptor() ([]byte, []int) {
	return fileDescriptor_superhero_7813f6f4c173e0be, []int{0}
}
func (m *Superhero) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Superhero) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Superhero.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Superhero) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Superhero.Merge(dst, src)
}
func (m *Superhero) XXX_Size() int {
	return m.Size()
}
func (m *Superhero) XXX_DiscardUnknown() {
	xxx_messageInfo_Superhero.DiscardUnknown(m)
}

var xxx_messageInfo_Superhero proto.InternalMessageInfo

func (m *Superhero) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Superhero) GetAffiliationId() int32 {
	if m != nil {
		return m.AffiliationId
	}
	return 0
}

func (m *Superhero) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Superhero) GetLife() float32 {
	if m != nil {
		return m.Life
	}
	return 0
}

func (m *Superhero) GetEnergy() float32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Superhero) GetPowers() []*Superpower {
	if m != nil {
		return m.Powers
	}
	return nil
}

type Superpower struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Damage               float32  `protobuf:"fixed32,3,opt,name=damage,proto3" json:"damage,omitempty"`
	Energy               float32  `protobuf:"fixed32,4,opt,name=energy,proto3" json:"energy,omitempty"`
	Passive              bool     `protobuf:"varint,5,opt,name=passive,proto3" json:"passive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Superpower) Reset()         { *m = Superpower{} }
func (m *Superpower) String() string { return proto.CompactTextString(m) }
func (*Superpower) ProtoMessage()    {}
func (*Superpower) Descriptor() ([]byte, []int) {
	return fileDescriptor_superhero_7813f6f4c173e0be, []int{1}
}
func (m *Superpower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Superpower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Superpower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Superpower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Superpower.Merge(dst, src)
}
func (m *Superpower) XXX_Size() int {
	return m.Size()
}
func (m *Superpower) XXX_DiscardUnknown() {
	xxx_messageInfo_Superpower.DiscardUnknown(m)
}

var xxx_messageInfo_Superpower proto.InternalMessageInfo

func (m *Superpower) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Superpower) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Superpower) GetDamage() float32 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Superpower) GetEnergy() float32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Superpower) GetPassive() bool {
	if m != nil {
		return m.Passive
	}
	return false
}

func init() {
	proto.RegisterType((*Superhero)(nil), "model.Superhero")
	proto.RegisterType((*Superpower)(nil), "model.Superpower")
}
func (m *Superhero) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Superhero) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSuperhero(dAtA, i, uint64(m.Id))
	}
	if m.AffiliationId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSuperhero(dAtA, i, uint64(m.AffiliationId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSuperhero(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Life != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Life))))
		i += 4
	}
	if m.Energy != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Energy))))
		i += 4
	}
	if len(m.Powers) > 0 {
		for _, msg := range m.Powers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSuperhero(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Superpower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Superpower) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSuperhero(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSuperhero(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Damage != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Damage))))
		i += 4
	}
	if m.Energy != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Energy))))
		i += 4
	}
	if m.Passive {
		dAtA[i] = 0x28
		i++
		if m.Passive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSuperhero(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Superhero) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSuperhero(uint64(m.Id))
	}
	if m.AffiliationId != 0 {
		n += 1 + sovSuperhero(uint64(m.AffiliationId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSuperhero(uint64(l))
	}
	if m.Life != 0 {
		n += 5
	}
	if m.Energy != 0 {
		n += 5
	}
	if len(m.Powers) > 0 {
		for _, e := range m.Powers {
			l = e.Size()
			n += 1 + l + sovSuperhero(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Superpower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSuperhero(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSuperhero(uint64(l))
	}
	if m.Damage != 0 {
		n += 5
	}
	if m.Energy != 0 {
		n += 5
	}
	if m.Passive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSuperhero(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSuperhero(x uint64) (n int) {
	return sovSuperhero(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Superhero) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperhero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Superhero: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Superhero: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliationId", wireType)
			}
			m.AffiliationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffiliationId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperhero
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Life", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Life = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Energy = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Powers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperhero
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Powers = append(m.Powers, &Superpower{})
			if err := m.Powers[len(m.Powers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperhero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSuperhero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Superpower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperhero
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Superpower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Superpower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperhero
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Damage = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Energy = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Passive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSuperhero(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSuperhero
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperhero(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperhero
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperhero
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSuperhero
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSuperhero
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSuperhero(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSuperhero = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperhero   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("superhero.proto", fileDescriptor_superhero_7813f6f4c173e0be) }

var fileDescriptor_superhero_7813f6f4c173e0be = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x06, 0x60, 0x93, 0x69, 0xa3, 0xf3, 0xc4, 0x51, 0xb3, 0x18, 0xb2, 0x2a, 0x65, 0x40, 0xa8,
	0x9b, 0x2e, 0xf4, 0x06, 0xee, 0xdc, 0xc6, 0x03, 0x48, 0x24, 0xaf, 0x63, 0xa0, 0x6d, 0x4a, 0x52,
	0x15, 0x3d, 0x89, 0x97, 0xf0, 0x1e, 0x2e, 0x3d, 0x82, 0xd4, 0x8b, 0x88, 0xcf, 0x16, 0x2b, 0xb3,
	0x7b, 0xff, 0xff, 0x67, 0xf1, 0x11, 0x38, 0x8e, 0x0f, 0x1d, 0x86, 0x7b, 0x0c, 0xbe, 0xec, 0x82,
	0xef, 0xbd, 0x4c, 0x1b, 0x6f, 0xb1, 0xde, 0xbc, 0x31, 0x58, 0xde, 0x4c, 0x93, 0x5c, 0x01, 0x77,
	0x56, 0xb1, 0x9c, 0x15, 0xa9, 0xe6, 0xce, 0xca, 0x33, 0x58, 0x99, 0xaa, 0x72, 0xb5, 0x33, 0xbd,
	0xf3, 0xed, 0xad, 0xb3, 0x8a, 0xd3, 0x76, 0x34, 0x6b, 0xaf, 0xad, 0x94, 0x90, 0xb4, 0xa6, 0x41,
	0xb5, 0xc8, 0x59, 0xb1, 0xd4, 0x74, 0xff, 0x74, 0xb5, 0xab, 0x50, 0x25, 0x39, 0x2b, 0xb8, 0xa6,
	0x5b, 0xae, 0x41, 0x60, 0x8b, 0x61, 0xfb, 0xac, 0x52, 0x6a, 0xc7, 0x24, 0xcf, 0x41, 0x74, 0xfe,
	0x09, 0x43, 0x54, 0x22, 0x5f, 0x14, 0x87, 0x17, 0xa7, 0x25, 0xe1, 0x4a, 0x82, 0xd1, 0xa2, 0xc7,
	0x07, 0x9b, 0x17, 0x80, 0xbf, 0x76, 0xc7, 0x3b, 0x41, 0xf8, 0x0c, 0xb2, 0x06, 0x61, 0x4d, 0x63,
	0xb6, 0xbf, 0x3c, 0xae, 0xc7, 0x34, 0xc3, 0x24, 0xff, 0x30, 0x0a, 0xf6, 0x3b, 0x13, 0xa3, 0x7b,
	0x44, 0x52, 0x1e, 0xe8, 0x29, 0x5e, 0x9d, 0xbc, 0x0f, 0x19, 0xfb, 0x18, 0x32, 0xf6, 0x39, 0x64,
	0xec, 0xf5, 0x2b, 0xdb, 0xbb, 0x13, 0xf4, 0x97, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xba,
	0x75, 0x89, 0xa7, 0x5e, 0x01, 0x00, 0x00,
}
